function cu(i) {
    return (i !== undefined && i == '.');
}
function cu1(i) {
    return (i !== undefined);
}
function cu2(i) {
    return (i !== undefined && i == '#');
}
function findanyineightpos(inp, i, j) {
    let rr = [];
    if (inp[i][j] == '#') {
        if (inp[i - 1] != undefined) {
            rr.push((cu2(inp[i - 1][j]) || cu2(inp[i - 1][j - 1]) || cu2(inp[i - 1][j + 1])))
        }
        if (inp[i + 1] != undefined) {
            rr.push((cu2(inp[i + 1][j]) || cu2(inp[i + 1][j - 1]) || cu2(inp[i + 1][j + 1])))
        }
        rr.push((cu2(inp[i][j - 1]) || cu2(inp[i][j + 1])));
        return !(rr.reduce((prev, curr) => { return prev || curr }))
    }
    else
        return true;
}
// function test(inp, i, j) {
//     return ((i == 0 && j == 0 && inp[0][0] == '#' && (inp[0][1] != '#' && inp[1][1] != '#' && inp[1][0] != '#')) ||
//         (i == 0 && j == inp[0].length - 1 && inp[i][j] == '#' && (inp[i][j - 1] != '#' && inp[i + 1][j] != '#' && inp[i + 1][j - 1] != '#')) ||
//         (i == inp.length - 1 && j == 0 && inp[i][j] == '#' && (inp[i - 1][j] != '#' && inp[i - 1][j + 1] != '#' && inp[i][j + 1] != '#')) ||
//         (i == inp.length - 1 && j == inp[0].length - 1 && inp[i][j] == '#' && (inp[i][j - 1] != '#' && inp[i - 1][j] != '#' && inp[i - 1][j - 1] != '#')) ||

//         (i == 0 && inp[i][j] == '#' && (inp[i][j - 1] != '#' && inp[i][j + 1] != '#' && inp[i + 1][j] != '#' && inp[i + 1][j - 1] != '#' && inp[i + 1][j + 1] != '#')) ||
//         (i == inp.length - 1 && inp[i][j] == '#' && (inp[i][j - 1] != '#' && inp[i][j + 1] != '#' && inp[i - 1][j] != '#' && inp[i - 1][j - 1] != '#' && inp[i - 1][j + 1] != '#')) ||
//         (j == 0 && inp[i][j] == '#' && (inp[i - 1][j] != '#' && inp[i + 1][j] != '#' && inp[i][j + 1] != '#' && inp[i - 1][j + 1] != '#' && inp[i + 1][j + 1] != '#')) ||
//         (j == inp[0].length - 1 && inp[i][j] == '#' && (inp[i][j - 1] != '#' && inp[i - 1][j] != '#' && inp[i - 1][j - 1] != '#' && inp[i + 1][j] != '#' && inp[i + 1][j - 1] != '#')) ||

//         (inp[i][j] !== '#' && inp[i - 1][j] !== '#' && inp[i - 1][j + 1] !== '#' && inp[i - 1][j - 1] !== '#' && inp[i + 1][j] !== '#' && inp[i + 1][j - 1] !== '#' && inp[i + 1][j + 1] !== '#' && inp[i][j - 1] !== '#' && inp[i][j + 1] !== '#')
//     );
// }
function main(input) {
    let inp = input.split('\n').map(x => x.split(''));
    let num = 6000;
    for (let i = 0; i < inp.length; i++) {
        let r = new Array(num).fill('.');
        inp[i] = inp[i].concat(r);
    }
    for (let i = 0; i < num; i++) {
        let r = new Array(num + inp.length).fill('.');
        inp.push(r);
    }

    // for (let i = 0; i < inp.length; i++) {
    //     let r = new Array(num).fill('0');
    //     let r1 = new Array(num).fill('0');
    //     let y = inp[i].concat(r);
    //     inp[i] = r1.concat(y);
    // }
    // // console.log(inp[0].length)
    // let ll = inp.length;
    // for (let i = 0; i < num; i++) {
    //     let r = new Array((num * 2) + ll).fill('0');
    //     let r1 = new Array((num * 2) + ll).fill('0');
    //     inp.unshift(r1);
    //     inp.push(r);
    // }

    let proposedPos = []; // to avoid collision of elves
    let movement = ['N', 'S', 'W', 'E'];
    for (let k = 0; k < 40; k++) { // 10 rounds

        for (let i = 0; i < inp.length; i++) {
            for (let j = 0; j < inp[0].length; j++) {
                if (inp[i][j] == '#') {
                    // if (test(inp, i, j) !== !findanyineightpos(inp, i, j)) {
                    //     console.log('problem found', test(inp, i, j), !findanyineightpos(inp, i, j))
                    //     console.log(i, j)
                    // }
                    // find its position as per movement and fit in proposed
                    if (findanyineightpos(inp, i, j)) {

                    }
                    else {
                        let directions = [...movement]
                        isNeeded = true;
                        directions.forEach((dir) => {
                            if (dir == 'N' && isNeeded) {
                                if (cu1(inp[i - 1]) && cu(inp[i - 1][j]) && cu(inp[i - 1][j - 1]) && cu(inp[i - 1][j + 1])) {
                                    let ppp = new pp(i + '-' + j, (i - 1) + '-' + (j))
                                    proposedPos.push(ppp);
                                    isNeeded = false;
                                }
                            }
                            else if (dir == 'S' && isNeeded) {
                                if (cu1(inp[i + 1]) && cu(inp[i + 1][j]) && cu(inp[i + 1][j - 1]) && cu(inp[i + 1][j + 1])) {
                                    let ppp = new pp(i + '-' + j, (i + 1) + '-' + (j))
                                    proposedPos.push(ppp);
                                    isNeeded = false;
                                }
                            }
                            else if (dir == 'W' && isNeeded) {
                                if (cu1(inp[i - 1]) && cu1(inp[i]) && cu1(inp[i + 1]) && cu(inp[i - 1][j - 1]) && cu(inp[i][j - 1]) && cu(inp[i + 1][j - 1])) {
                                    let ppp = new pp(i + '-' + j, (i) + '-' + (j - 1))
                                    proposedPos.push(ppp);
                                    isNeeded = false;
                                }
                            }
                            else if (dir == 'E' && isNeeded) {
                                if (cu1(inp[i - 1]) && cu1(inp[i]) && cu1(inp[i + 1]) && cu(inp[i - 1][j + 1]) && cu(inp[i][j + 1]) && cu(inp[i + 1][j + 1])) {
                                    let ppp = new pp(i + '-' + j, (i) + '-' + (j + 1))
                                    proposedPos.push(ppp);
                                    isNeeded = false;
                                }
                            }

                        })
                    }
                }
            }
        }
        // prepare for next round 
        let ll = movement.shift();
        movement.push(ll); // rotate movement as required.

        // check elligible positions and move accordingly.
        //console.log(JSON.stringify(proposedPos))
        proposedPos.forEach((elem) => {
            if (proposedPos.filter(x => x.new == elem.new && x.old != elem.old).length > 0) {
                // do nothing
            }
            else {
                // actually move elves
                let newx = parseInt(elem.new.split('-')[0])
                let newy = parseInt(elem.new.split('-')[1])

                let oldx = parseInt(elem.old.split('-')[0])
                let oldy = parseInt(elem.old.split('-')[1])

                inp[oldx][oldy] = '.'
                inp[newx][newy] = '#'
            }
        })
        proposedPos = [];
        // print
        //console.log('--------------------------------------Round--- => ' + (k + 1))


        //console.log(inp.join('\n').split(',').join(''))
    }


    // here final grid is made,,,now we need to calculate . 
    let top = Infinity;
    let left = Infinity;
    let bottom = -Infinity;
    let right = -Infinity;
    for (let i = 0; i < inp.length; i++) {
        for (let j = 0; j < inp[0].length; j++) {
            if (inp[i][j] == '#') {
                if (i < top) { top = i; }
                if (j < left) { left = j; }
                if (i > bottom) { bottom = i; }
                if (j > right) { right = j }
            }
        }
    }
    //console.log(top, left, bottom, right)
    //calculate final result
    let finalresult = 0;
    for (let i = top; i <= bottom; i++) {
        for (let j = left; j <= right; j++) {
            if (inp[i][j] !== '#') {
                finalresult++;
            }
        }
    }
    //console.log(finalresult)
    return finalresult;
}

class pp {
    constructor(oldp, newp) {
        this.old = oldp;
        this.new = newp;
    }
}


let input = `#...##..#.#.#.#...#....###.#.#.#.##..###.#.##.#.#...#.##.#.#.#########.#
#..#..##....###.###...#.#...#..#......#...#..###.####.#..#####..#.##...#
.#..##..#..#...#.##.#..#..######..##.#..#.##...#.#..#..#.###.#.#..#.....
###.#..#.#...#.#####.#..##.#.##.#.#.#.##.##...####..#....##...#.######..
....######....##.#.##.#.##.#..#.#.#.#.....###.###.#..#....#..##...#..#.#
#..###...#..##...#######....#.#..#.#..####...#..#.##..##.##.#.##.#.##..#
#.#.######.#.###....#.#.#..#.#...##.#.##..#..#####.##.#...#..###...###.#
..#..#.#.#.#.....#..#.#.##..####.#.#.###..#....#..##.##..#...####.#.#.#.
#.#.#.....#.##..........#.#.#...#.......#..##...##.#..#..###..##..#.#..#
.#.#...#..##..#...#.##...#.#.#.#.##.####.....#...##..#..##....##...#####
#.##.#.#..#####.#.#....#.#..#...#....##.##.##.#..##.##.#.###..##...#.###
#.#.##.....##..#.#....######.###...##..##...#.#..##.###..###....#.#.###.
...###..#..##.#.#.#..##.#..#...#.#...#.###.####.....#..###.#..##..#####.
..##.....##..##..###.##.###..#####.#..#.#.###..#.###.####..#.###..#....#
#########.#..##.#.##...##.#.#.#......##...###..#.......##..#.###...#...#
.#...#.....##......#..##.##.#......#.####..#...#.##..#..##..###.###...##
###....#..#.#...##...#...#.#......#.##..#.##..####.#....#....##.##..#...
#####.#..#.#..#.#.#.###.###.##...##..##..#..###...######..#..#.#..###...
.....#...#.#..#.####.#..#....###..#...##..#.....#..####....#.#.#..##....
#..#.#.#.#...#####.#...#.#####......#.##.####...#....##.#..#.##.##...###
##..#.##.##...######.#.##....#.#...##..#.#.##.#.#...#...#.#..###...###.#
....###..#..#.##...#...#.##.###..#..#.##.#.####...###...######.###.###..
#......#..#.#.####....###....#.###.#.###..##..####.#....###...#.#.......
#...##...##..##.#...###.#.#.#....##.###..#..#####.#.#...##....########.#
#..####..#.#........#####..#.#.###..#.###..#..#....#......#.#.......#...
#.#.#.#.#...#.##..#.....#..#...#.##..#.########......##.#.#.#####..#....
######..##..#.#.....#..##.#.##.#.#.####..##..#..##.##.#..#.#.####.#.#.#.
....##.#.#.......###.##...#..###.#.##.#..##..#####.#.##...#..###.#.##.#.
..##..##..#.#..##...#.#.####.......###..##..###.#.##..#..#.#.#####...##.
...#....####.##..#..####..#.#..###.....##.##.#..#....#####..####.#.....#
#.##.#.#..#.##..#.#####..#..###..##....#...#..#...#..#.##.###.#.....#...
..#.#.#.##...##.#....##...#..##.#.#..#..#....###...##....#....#.#..##..#
..###.#####..#...#.###...#..#.###.##....#.#.....###.##..#####.#.#.##..#.
#.###..##.###.#..#...##..#..#...#.#.....#.#..##...##.###.#.###...###..##
###.....#.#........#.####.#.#.#.#..#.###.##....##.#.#..##.##...##..#....
#.#.##.###....#.###...##..#####....#####..###..##.###.#..####.##..#.....
##.#..##.#.#.##..#######.##...##...###..##..####.#.#.###..#.###.#.###..#
...####.#..#.##...#..##..####.#....#.##...###..#.##.####.....#.....#.###
#..#.....#.########..###....#.#.#....##....#.###..#.....###.##.###....##
#.#.#.#....#.##.#.#...#.#.#.#.#...#..#.##......#.#...#...#######.##....#
##.########.####.####.#.##.#.#.##...#.#.###..#.###....#.##...##...#..##.
..###...##...##.#...###.###.###....###...###.###...#.............####.#.
..#....#..#.##.#..#.##.#.####.##....#....#.##.#..#..##.##.###..#.#..###.
..##...#.#...#..#.#...........#..######.#.##...##.#..#....#.##.#######.#
##.#.####.#.##..####..####..#.#.#######....#.#..#.#...#.#.#...#####.#.##
#.....#.#.##.#..##..#####.##.#.#.#.#......###.##..##.#####..######.#..#.
.###....##..##.#.####..#.#.#.####..###...#.##...###..#..#....##.#...#..#
##.######....#.#....#.##..#.##......##.#..#.###..#..##.##.###...#..#....
..#.##.##..##...#...##..#.###....######....#.#....###.#####...#.#######.
###..#.#.###.#..#..###.....#...#..##.....#.##...#.#######.##.#..##......
#....##.#...#####...##.#..######.####..####..#..#.##.######..##.#.######
#.#.....#..##..#.#.#..##.##....######..####..###...####..#.#.##########.
.#.#....##..##.###..####......#.....###........##.#...#..###.#......#.##
#...##...###.#.#....#.####.#..#.##.#.##........####...#..##.##.#...##.#.
##.#####.#####...#.#####..#..#.##..##.#.##.###.#..###..####.#####.#...#.
.#.#####...#.#.##....#.#.########...#...###..##.#.##....#..#####.######.
.#..#.###....#....#.#####.####.#.##..#.###.##.#...#....##.##.#.#..#..##.
..###..##.#.####..#.#.#...#.#.#..#..###..##.#..###.#...#..###....#.#.###
##.##....#########..###..#..##...#.#.##..####....#####.#.....##...#.#.##
..###.........#.##.#...##.##.###.#.###.#.#.#...##.###..#......##....#.#.
...#.#######.##..###..#.#.###..##...###.#..##...##.######.##..#..#....#.
..#...#....##.##.##..#.#...##.....#..#######....#...####.#.###..#..#.###
.#..#.###..#.##.#....#.#..##.#...##..#..####..##..#..#.##.#..####...#..#
#.##..##..#.###..#...#.##...#.##..###.....####..##..#.##.###.#.#.##.....
..#.##..#####......###.#..#.#..##.##.##.###.#..##.####....#.#.#....###.#
..##...#......##.##....#.##.###.#.#.#.##...###....#.#...#..#....###.....
...####.#..#.#.#....##.####.#.##.#..###.#....#.....#.#..#.#...##########
##.#####......##.########....#.#.#.#.#.####..##.#..###..#.#..##...#..#.#
#.#...##.##..#####.#...###.##..#.#....####.##...#.####..####..#...##..##
.##..##.#####.#.#.#.##.#.#....#....##.#############....#######..###.##.#
.#...###..##.#....##.####..###.##...#...#.#.####..###.###.#...##...##.#.
#...####.#.....##.....##.###.##.####.#..#.#..##.##.#.#...#..#.##..###.##`;
//console.log(input)
//console.log('----------------------')
let input1 = `..............
..............
.......#......
.....###.#....
...#...#.#....
....#...##....
...#.###......
...##.#.##....
....#..#......
..............
..............
..............`;
console.log(main(input))